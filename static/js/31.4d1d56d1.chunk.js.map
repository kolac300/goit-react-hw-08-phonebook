{"version":3,"file":"static/js/31.4d1d56d1.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactEditor/ContactEditor.styled.js","components/ContactEditor/ContactEditor.js","components/ContactList/contact/Contact.jsx","components/ContactList/Contacts.styled.js","components/ContactList/ContactList.jsx","components/ContactsFilter/ContactsFilter.js","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const Label = styled.label`\n  display: block;\n  margin: 1em;\n  font-size: 1.5em;\n  font-weight: bolder;\n`;\n\nexport const StyledForm = styled(Form)`\n  padding: 0 5em 0 5em;\n  text-align: left;\n`;\n\nexport const InvalidValue = styled.div`\n  width: 30%;\n  color: white;\n  font-size: 1.2rem;\n  padding: 0.6rem;\n  background-color: red;\n  text-align: center;\n  border-radius: 0.3em;\n  margin-top: 0.5em;\n`;\n\nexport const StyledField = styled(Field)`\n  box-shadow: inset #abacaf 0 0 0 1px;\n  border: 0;\n  background: rgba(0, 0, 0, 0);\n  width: 30%;\n  appearance: none;\n  position: relative;\n  border-radius: 3px;\n  padding: 9px 12px;\n  line-height: 1.4;\n  color: rgb(0, 0, 0);\n  font-size: 16px;\n  font-weight: 400;\n  height: 40px;\n  transition: all 0.2s ease;\n  :hover {\n    box-shadow: 0 0 0 0 #fff inset, silver 0 0 0 1px;\n  }\n  :focus {\n    background: #fff;\n    outline: 0;\n    box-shadow: 0 0 0 0 #fff inset, lime 0 0 0 2px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport * as yup from 'yup';\nimport { toast } from 'react-hot-toast';\nimport { ErrorMessage, Formik } from 'formik';\nimport {\n  InvalidValue,\n  Label,\n  StyledField,\n  StyledForm,\n} from './ContactEditor.styled';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { Button } from '@chakra-ui/react';\n\nconst phoneRegexp = /^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$/;\nconst scheme = yup.object().shape({\n  number: yup\n    .string()\n    .trim()\n    .matches(phoneRegexp, '+380xxxxxxxxx')\n    .required('required'),\n  name: yup\n    .string()\n    .min(3, 'at least 3 symbols')\n    .max(40, 'at most 40 symbols')\n    .required('required'),\n});\nconst initialValues = {\n  number: '',\n  name: '',\n};\n\nexport const isAlredyExistInContacts = (name, contacts) => {\n  return contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase()\n  );\n};\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const onSubmit = (value, { resetForm }) => {\n    const { name, number } = value;\n    if (isAlredyExistInContacts(name, contacts)) {\n      toast.error('contact already exist');\n    } else {\n      dispatch(addContact({ name, number }));\n      resetForm();\n    }\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={scheme}\n        onSubmit={onSubmit}\n      >\n        <StyledForm>\n          <Label>Name</Label>\n          <StyledField type=\"text\" name=\"name\" />\n          <ErrorMessage component={InvalidValue} name=\"name\" />\n          <Label>Number</Label>\n          <StyledField type=\"tel\" name=\"number\" />\n          <ErrorMessage component={InvalidValue} name=\"number\" />\n          <Label htmlFor=\"\">\n            <Button type=\"submit\" colorScheme=\"purple\" size=\"lg\">\n              Add contact\n            </Button>\n          </Label>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, updateContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { isAlredyExistInContacts } from 'components/ContactEditor/ContactEditor';\nimport { toast } from 'react-hot-toast';\nimport { Button, Input, Stack } from '@chakra-ui/react';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts)\n  const NameRef = useRef(null);\n  const NumberRef = useRef(null);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id))\n  }\n  const handleUpdate = () => {\n    if (isAlredyExistInContacts(NameRef.current.value, contacts)) {\n      toast.error('Contact alredy exists')\n    } else {\n      dispatch(updateContact({ name: NameRef.current.value, number: NumberRef.current.value, id }))\n    }\n  }\n\n  return (\n    <li>\n      <Stack direction='row' spacing={4} align='center'>\n        <Input ref={NameRef}\n          defaultValue={name}\n          focusBorderColor='lime'\n        />\n        <Input ref={NumberRef}\n          defaultValue={number}\n          focusBorderColor='lime'\n        />\n        <Button colorScheme=\"purple\" variant=\"solid\" onClick={handleDelete}>\n          Delete\n        </Button>\n        <Button colorScheme=\"purple\" variant=\"solid\" onClick={handleUpdate}>\n          Save\n        </Button>\n      </Stack>\n      <br />\n    </li>\n  );\n};\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nexport const SearchWrapper = styled.div`\n  padding: 1em 0;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Contact } from './contact/Contact';\nimport { SearchWrapper } from './Contacts.styled';\n\n\n\n\nconst getFiltredContacts = (contacts, filter) => {\n  if (contacts.length) {\n    return contacts.filter(contact =>\n      contact.name\n        .toLowerCase()\n        .includes(filter\n          .toLowerCase()) || contact.number.includes(filter))\n  }\n  return []\n};\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts)\n  const filter = useSelector(selectFilter);\n  const filtredContacts = getFiltredContacts(contacts, filter)\n  return (\n    <>\n      <SearchWrapper>\n        <ul>\n          {filtredContacts.map(contact => (\n            <Contact\n              key={contact.id}\n              id={contact.id}\n              name={contact.name}\n              number={contact.number}\n            />\n          ))}\n        </ul>\n      </SearchWrapper>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/filter/Filter';\nimport { Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { useRef } from 'react';\nexport default function ContactsFilter() {\n  const dispatch = useDispatch();\n  const filterRef = useRef();\n  const handleFilterChange = () =>\n    dispatch(setStatusFilter(filterRef.current.value));\n  return (\n    <div>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents=\"none\"\n          children={<SearchIcon color=\"gray.300\" />}\n        />\n        <Input\n          ref={filterRef}\n          focusBorderColor=\"lime\"\n          type=\"text\"\n          placeholder=\"Contact name or number\"\n          onChange={handleFilterChange}\n        />\n      </InputGroup>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport ContactsFilter from 'components/ContactsFilter/ContactsFilter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <ContactEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsFilter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","Label","styled","StyledForm","Form","InvalidValue","StyledField","Field","scheme","yup","shape","number","trim","matches","required","name","min","max","initialValues","isAlredyExistInContacts","some","contact","toLowerCase","ContactEditor","dispatch","useDispatch","useSelector","validationSchema","onSubmit","value","resetForm","toast","addContact","type","component","htmlFor","colorScheme","size","Contact","id","NameRef","useRef","NumberRef","direction","spacing","align","I","ref","defaultValue","focusBorderColor","variant","onClick","deleteContact","current","updateContact","SearchWrapper","ContactList","filtredContacts","length","includes","getFiltredContacts","map","ContactsFilter","filterRef","pointerEvents","children","color","placeholder","onChange","setStatusFilter","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}