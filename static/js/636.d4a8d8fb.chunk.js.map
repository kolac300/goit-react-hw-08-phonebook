{"version":3,"file":"static/js/636.d4a8d8fb.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/contact/Contact.styled.js","components/ContactEditor/ContactEditor.styled.js","components/ContactEditor/ContactEditor.js","components/ContactList/contact/Contact.jsx","components/ContactList/Contacts.styled.js","components/ContactList/ContactList.jsx","components/ContactsFilter/ContactsFilter.js","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import styled from 'styled-components';\nexport const Li = styled.li`\n  padding: 0.3em;\n  list-style: none;\n`;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const Label = styled.label`\n  display: block;\n  margin: 1em;\n  font-size: 1.5em;\n  font-weight: bolder;\n\n  button {\n    border: none;\n    border-radius: 5px;\n    background-color: silver;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    display: inline-block;\n    font-size: 16px;\n    -webkit-transition-duration: 0.4s;\n    transition-duration: 0.4s;\n  }\n\n  button:hover {\n    background-color: #4caf50;\n    color: white;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  padding: 0 5em 0 5em;\n  text-align: center;\n`;\n\nexport const InvalidValue = styled.div`\n  background-color: red;\n  text-align: center;\n  border-radius: 0.6em;\n  margin-top: 0.5em;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport * as yup from 'yup';\nimport { toast } from 'react-hot-toast';\nimport { ErrorMessage, Field, Formik } from 'formik';\nimport { InvalidValue, Label, StyledForm } from './ContactEditor.styled';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nconst phoneRegexp = /^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$/;\nconst scheme = yup.object().shape({\n  number: yup\n    .string()\n    .trim()\n    .matches(phoneRegexp, 'add correct format phone +380ххххххххх')\n    .required(),\n  name: yup.string().min(3).max(40).required(),\n});\nconst initialValues = {\n  number: '',\n  name: '',\n};\n\nexport const isAlredyExistInContacts = (name, contacts) => {\n  return contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase()\n  );\n};\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const onSubmit = (value, { resetForm }) => {\n    const { name, number } = value;\n    if (isAlredyExistInContacts(name, contacts)) {\n      toast.error('contact already exist');\n    } else {\n      dispatch(addContact({ name, number }));\n      resetForm();\n    }\n  };\n\n  return (\n    <>\n      <h1>Phone Book</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={scheme}\n        onSubmit={onSubmit}\n      >\n        <StyledForm>\n          <Label>Name</Label>\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage component={InvalidValue} name=\"name\" />\n          <Label>Number</Label>\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage component={InvalidValue} name=\"number\" />\n          <Label htmlFor=\"\">\n            <button type=\"submit\">Add contact</button>\n          </Label>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n};\n","import { Li } from './Contact.styled';\nimport PropTypes from 'prop-types';\nimport React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, updateContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { isAlredyExistInContacts } from 'components/ContactEditor/ContactEditor';\nimport { toast } from 'react-hot-toast';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts)\n  const NameRef = useRef(null);\n  const NumberRef = useRef(null);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id))\n  }\n  const handleUpdate = () => {\n    if (isAlredyExistInContacts(NameRef.current.value, contacts)) {\n      toast.error('Contact alredy exists')\n    } else {\n      dispatch(updateContact({ name: NameRef.current.value, number: NumberRef.current.value, id }))\n    }\n  }\n\n  return (\n    <Li>\n      <input ref={NameRef} defaultValue={name} type='text' />:\n      <input ref={NumberRef} defaultValue={number} type='text' />\n      <button onClick={handleDelete}>Delete</button>\n      <button onClick={handleUpdate}>Save changes</button>\n    </Li>\n  );\n};\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nexport const SearchWrapper = styled.div`\n  padding: 1em;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Contact } from './contact/Contact';\nimport { SearchWrapper } from './Contacts.styled';\n\n\n\n\nconst getFiltredContacts = (contacts, filter) => {\n  if (contacts.length) {\n    return contacts.filter(contact =>\n      contact.name\n        .toLowerCase()\n        .includes(filter\n          .toLowerCase()))\n  }\n  return []\n};\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts)\n  const filter = useSelector(selectFilter);\n  const filtredContacts = getFiltredContacts(contacts, filter)\n  return (\n    <>\n      <SearchWrapper>\n        <ul>\n          {filtredContacts.map(contact => (\n            <Contact\n              key={contact.id}\n              id={contact.id}\n              name={contact.name}\n              number={contact.number}\n            />\n          ))}\n        </ul>\n      </SearchWrapper>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setStatusFilter } from 'redux/filter/Filter';\n\nexport default function ContactsFilter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleFilterChange = e => dispatch(setStatusFilter(e.target.value));\n\n  return (\n    <div>\n      <h1>Search</h1>\n      <input type=\"text\" value={filter} onChange={handleFilterChange} />\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport ContactsFilter from 'components/ContactsFilter/ContactsFilter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <ContactEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsFilter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","Li","styled","Label","StyledForm","Form","InvalidValue","scheme","yup","shape","number","trim","matches","required","name","min","max","initialValues","isAlredyExistInContacts","some","contact","toLowerCase","ContactEditor","dispatch","useDispatch","useSelector","validationSchema","onSubmit","value","resetForm","toast","addContact","type","component","htmlFor","Contact","id","NameRef","useRef","NumberRef","ref","defaultValue","onClick","deleteContact","current","updateContact","SearchWrapper","ContactList","filtredContacts","length","includes","getFiltredContacts","map","ContactsFilter","onChange","e","setStatusFilter","target","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}